{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://calculator-ts/./src/scripts/ThemeToggle.js","webpack://calculator-ts/webpack/bootstrap","webpack://calculator-ts/./src/scripts/commands/digit-command.ts","webpack://calculator-ts/./src/scripts/commands/decimal-command.ts","webpack://calculator-ts/./src/scripts/commands/operator-command.ts","webpack://calculator-ts/./src/scripts/commands/single-operand-command.ts","webpack://calculator-ts/./src/scripts/commands/result-command.ts","webpack://calculator-ts/./src/scripts/commands/clear-command.ts","webpack://calculator-ts/./src/scripts/commands/toggle-sign-command.ts","webpack://calculator-ts/./src/scripts/commands/delete-last-digit-command.ts","webpack://calculator-ts/./src/scripts/commands/percentage-command.ts","webpack://calculator-ts/./src/scripts/calculator-main.ts","webpack://calculator-ts/./src/scripts/calculator-receiver.ts"],"sourcesContent":["\r\nfunction calculateSettingAsThemeString({ localStorageTheme, systemSettingDark }) {\r\n    if (localStorageTheme !== null) {\r\n        return localStorageTheme;\r\n    }\r\n\r\n    if (systemSettingDark.matches) {\r\n        return \"dark\";\r\n    }\r\n\r\n    return \"light\";\r\n}\r\n\r\n/**\r\n * Utility function to update the button text and aria-label.\r\n */\r\nfunction updateButton({ buttonEl, isDark }) {\r\n    const newCta = isDark ? \"Change to light theme\" : \"Change to dark theme\";\r\n    // use an aria-label if you are omitting text on the button\r\n    // and using a sun/moon icon, for example\r\n    buttonEl.setAttribute(\"aria-label\", newCta);\r\n    const sunIcon = buttonEl.querySelector(\".sun\");\r\n    const moonIcon = buttonEl.querySelector(\".moon\");\r\n\r\n    if (isDark) {\r\n        sunIcon.classList.add(\"hidden\");\r\n        moonIcon.classList.remove(\"hidden\");\r\n    } else {\r\n        sunIcon.classList.remove(\"hidden\");\r\n        moonIcon.classList.add(\"hidden\");\r\n    }\r\n}\r\n\r\n/**\r\n * Utility function to update the theme setting on the html tag\r\n */\r\nfunction updateThemeOnHtmlEl({ theme }) {\r\n    document.querySelector(\"html\").setAttribute(\"data-theme\", theme);\r\n}\r\n\r\n\r\n/**\r\n * On page load:\r\n */\r\n\r\n/**\r\n * 1. Grab what we need from the DOM and system settings on page load\r\n */\r\nconst button = document.querySelector(\"[data-theme-toggle]\");\r\nconst localStorageTheme = localStorage.getItem(\"theme\");\r\nconst systemSettingDark = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n\r\n/**\r\n * 2. Work out the current site settings\r\n */\r\nlet currentThemeSetting = calculateSettingAsThemeString({ localStorageTheme, systemSettingDark });\r\n\r\n/**\r\n * 3. Update the theme setting and button text accoridng to current settings\r\n */\r\nupdateButton({ buttonEl: button, isDark: currentThemeSetting === \"dark\" });\r\nupdateThemeOnHtmlEl({ theme: currentThemeSetting });\r\n\r\n/**\r\n * 4. Add an event listener to toggle the theme\r\n */\r\nbutton.addEventListener(\"click\", (event) => {\r\n    const newTheme = currentThemeSetting === \"dark\" ? \"light\" : \"dark\";\r\n\r\n    localStorage.setItem(\"theme\", newTheme);\r\n    updateButton({ buttonEl: button, isDark: newTheme === \"dark\" });\r\n    updateThemeOnHtmlEl({ theme: newTheme });\r\n\r\n    currentThemeSetting = newTheme;\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export class DigitCommand {\n    constructor(digit, receiver) {\n        this.digit = digit;\n        this.receiver = receiver;\n    }\n    execute() {\n        this.receiver.inputDigit(this.digit);\n    }\n}\n","export class DecimalCommand {\n    constructor(receiver) {\n        this.receiver = receiver;\n    }\n    execute() {\n        this.receiver.inputDecimal();\n    }\n}\n","export class OperatorCommand {\n    constructor(operator, receiver) {\n        this.operator = operator;\n        this.receiver = receiver;\n    }\n    execute() {\n        this.receiver.inputOperator(this.operator);\n    }\n}\n","export class SingleOperandCommand {\n    constructor(operator, receiver) {\n        this.operator = operator;\n        this.receiver = receiver;\n    }\n    execute() {\n        this.receiver.handleSingleOperandOperator(this.operator);\n    }\n}\n","export class ResultCommand {\n    constructor(receiver) {\n        this.receiver = receiver;\n    }\n    execute() {\n        this.receiver.calculateResult();\n    }\n}\n","export class ClearCommand {\n    constructor(receiver) {\n        this.receiver = receiver;\n    }\n    execute() {\n        this.receiver.clear();\n    }\n}\n","export class ToggleSignCommand {\n    constructor(receiver) {\n        this.receiver = receiver;\n    }\n    execute() {\n        this.receiver.toggleSign();\n    }\n}\n","export class DeleteLastDigitCommand {\n    constructor(receiver) {\n        this.receiver = receiver;\n    }\n    execute() {\n        this.receiver.deleteLastDigit();\n    }\n}\n","export class PercentageCommand {\n    constructor(receiver) {\n        this.receiver = receiver;\n    }\n    execute() {\n        this.receiver.handlePercentage();\n    }\n}\n","import { CalculatorReceiver } from \"./calculator-receiver\";\nimport { DigitCommand } from \"./commands/digit-command\";\nimport { DecimalCommand } from \"./commands/decimal-command\";\nimport { OperatorCommand } from \"./commands/operator-command\";\nimport { SingleOperandCommand } from \"./commands/single-operand-command\";\nimport { ResultCommand } from \"./commands/result-command\";\nimport { ClearCommand } from \"./commands/clear-command\";\nimport { ToggleSignCommand } from \"./commands/toggle-sign-command\";\nimport { DeleteLastDigitCommand } from \"./commands/delete-last-digit-command\";\nimport { PercentageCommand } from \"./commands/percentage-command\";\nimport \"../scripts/ThemeToggle\";\nconst display = document.querySelector(\".display\");\nconst buttons = document.querySelectorAll(\".buttons button\");\nconst receiver = new CalculatorReceiver(display);\nconst doubleOperandOperators = [\"+\", \"-\", \"×\", \"÷\", \"y√x\", \"xy\"];\nconst singleOperandOperators = [\n    \"mc\",\n    \"m+\",\n    \"m-\",\n    \"mr\",\n    \"2nd\",\n    \"x2\",\n    \"x3\",\n    \"ex\",\n    \"10x\",\n    \"1/x\",\n    \"√x\",\n    \"3√x\",\n    \"ln\",\n    \"log10\",\n    \"x!\",\n    \"sin\",\n    \"cos\",\n    \"tan\",\n    \"e\",\n    \"EE\",\n    \"Rad\",\n    \"sinh\",\n    \"cosh\",\n    \"tanh\",\n    \"π\",\n    \"Rand\",\n];\nfunction handleButtonClick(event) {\n    var _a;\n    const button = event.target;\n    const buttonValue = ((_a = button.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || \"\";\n    if (!isNaN(Number(buttonValue))) {\n        new DigitCommand(buttonValue, receiver).execute();\n    }\n    else if ([\",\", \".\"].includes(buttonValue)) {\n        new DecimalCommand(receiver).execute();\n    }\n    else if (doubleOperandOperators.includes(buttonValue)) {\n        new OperatorCommand(buttonValue, receiver).execute();\n    }\n    else if (singleOperandOperators.includes(buttonValue)) {\n        new SingleOperandCommand(buttonValue, receiver).execute();\n    }\n    else if (buttonValue === \"=\") {\n        new ResultCommand(receiver).execute();\n    }\n    else if (buttonValue === \"AC\") {\n        new ClearCommand(receiver).execute();\n    }\n    else if (buttonValue === \"±\") {\n        new ToggleSignCommand(receiver).execute();\n    }\n    else if (buttonValue === \"%\") {\n        new PercentageCommand(receiver).execute();\n    }\n}\nfunction handleKeyboardInput(event) {\n    const key = event.key;\n    if (!isNaN(Number(key))) {\n        new DigitCommand(key, receiver).execute();\n    }\n    else if ([\"+\", \"-\", \"*\", \"/\"].includes(key)) {\n        new OperatorCommand(convertOperator(key), receiver).execute();\n    }\n    else if ([\",\", \".\"].includes(key)) {\n        new DecimalCommand(receiver).execute();\n    }\n    else if (key === \"Enter\" || key === \"=\") {\n        new ResultCommand(receiver).execute();\n    }\n    else if (key === \"Escape\" || key === \"Delete\") {\n        new ClearCommand(receiver).execute();\n    }\n    else if (key === \"Backspace\") {\n        new DeleteLastDigitCommand(receiver).execute();\n    }\n}\nfunction convertOperator(key) {\n    switch (key) {\n        case \"/\":\n            return \"÷\";\n        case \"*\":\n            return \"×\";\n        default:\n            return key;\n    }\n}\nbuttons.forEach((button) => {\n    button.addEventListener(\"click\", handleButtonClick);\n});\ndocument.addEventListener(\"keydown\", handleKeyboardInput);\n","export class CalculatorReceiver {\n    constructor(display) {\n        this.firstOperand = \"\";\n        this.operator = \"\";\n        this.secondOperand = \"\";\n        this.shouldResetDisplay = false;\n        this.memory = 0;\n        this.display = display;\n    }\n    updateDisplay(value) {\n        if (this.display) {\n            this.display.textContent = value.toString();\n        }\n    }\n    clear() {\n        this.firstOperand = \"\";\n        this.secondOperand = \"\";\n        this.operator = \"\";\n        this.shouldResetDisplay = false;\n        this.updateDisplay(\"0\");\n    }\n    deleteLastDigit() {\n        if (this.shouldResetDisplay)\n            return;\n        if (!this.operator) {\n            if (this.firstOperand) {\n                this.firstOperand =\n                    this.firstOperand.length > 1 ? this.firstOperand.slice(0, -1) : \"\";\n            }\n            this.updateDisplay(this.firstOperand || \"0\");\n        }\n        else if (this.secondOperand) {\n            this.secondOperand =\n                this.secondOperand.length > 1 ? this.secondOperand.slice(0, -1) : \"\";\n            this.updateDisplay(`${this.firstOperand} ${this.operator} ${this.secondOperand}`);\n        }\n    }\n    toggleSign() {\n        if (!this.operator) {\n            if (this.firstOperand) {\n                if (this.firstOperand[0] === \"-\") {\n                    this.firstOperand = this.firstOperand.substring(1);\n                }\n                else {\n                    this.firstOperand = \"-\" + this.firstOperand;\n                }\n                this.updateDisplay(this.firstOperand);\n            }\n        }\n        else if (this.secondOperand) {\n            if (this.secondOperand[0] === \"-\") {\n                this.secondOperand = this.secondOperand.substring(1);\n            }\n            else {\n                this.secondOperand = \"-\" + this.secondOperand;\n            }\n            this.updateDisplay(`${this.firstOperand} ${this.operator} ${this.secondOperand}`);\n        }\n    }\n    handlePercentage() {\n        if (this.firstOperand && !this.operator) {\n            const value = parseFloat(this.firstOperand) / 100;\n            this.firstOperand = value.toString();\n            this.updateDisplay(this.firstOperand);\n        }\n        if (this.secondOperand && this.operator) {\n            const value = (parseFloat(this.firstOperand) * parseFloat(this.secondOperand)) / 100;\n            this.secondOperand = value.toString();\n            this.updateDisplay(`${this.firstOperand} ${this.operator} ${this.secondOperand}`);\n        }\n    }\n    calculateResult() {\n        if (!this.firstOperand || !this.secondOperand)\n            return;\n        const a = parseFloat(this.firstOperand);\n        const b = parseFloat(this.secondOperand);\n        let result = \"\";\n        switch (this.operator) {\n            case \"+\":\n                result = a + b;\n                break;\n            case \"-\":\n                result = a - b;\n                break;\n            case \"×\":\n                result = a * b;\n                break;\n            case \"÷\":\n                result = b !== 0 ? a / b : \"Ошибка\";\n                break;\n            case \"y√x\":\n                result = a ** (1 / b);\n                break;\n            case \"xy\":\n                result = Math.pow(a, b);\n                break;\n            case \"e\":\n                if (this.operator) {\n                    this.secondOperand = Math.E.toString();\n                    this.updateDisplay(`${this.firstOperand} ${this.operator} ${this.secondOperand}`);\n                }\n                else {\n                    this.firstOperand = Math.E.toString();\n                    this.updateDisplay(this.firstOperand);\n                }\n                break;\n            default:\n                return;\n        }\n        if (typeof result === \"number\" && !Number.isInteger(result)) {\n            result = parseFloat(result.toFixed(2));\n        }\n        this.updateDisplay(result.toString());\n        this.shouldResetDisplay = true;\n        this.firstOperand = typeof result === \"number\" ? result.toString() : \"\";\n        this.secondOperand = \"\";\n        this.operator = \"\";\n    }\n    inputDigit(digit) {\n        if (digit === \"0\" && this.firstOperand === \"0\" && !this.operator)\n            return;\n        if (this.shouldResetDisplay) {\n            this.firstOperand = \"\";\n            this.operator = \"\";\n            this.shouldResetDisplay = false;\n        }\n        if (!this.operator) {\n            if (!this.firstOperand) {\n                this.firstOperand = digit;\n            }\n            else {\n                this.firstOperand = `${this.firstOperand}${digit}`;\n            }\n            this.updateDisplay(this.firstOperand);\n        }\n        else {\n            if (!this.secondOperand) {\n                this.secondOperand = digit;\n            }\n            else {\n                this.secondOperand = `${this.secondOperand}${digit}`;\n            }\n            this.updateDisplay(`${this.firstOperand} ${this.operator} ${this.secondOperand}`);\n        }\n    }\n    inputDecimal() {\n        if (this.shouldResetDisplay) {\n            this.firstOperand = \"0\";\n            this.operator = \"\";\n            this.shouldResetDisplay = false;\n        }\n        if (!this.operator) {\n            if (!this.firstOperand) {\n                this.firstOperand = \"0\";\n            }\n            if (!this.firstOperand.includes(\".\")) {\n                this.firstOperand = `${this.firstOperand}.`;\n                this.updateDisplay(this.firstOperand);\n            }\n        }\n        else {\n            if (!this.secondOperand) {\n                this.secondOperand = \"0\";\n            }\n            if (!this.secondOperand.includes(\".\")) {\n                this.secondOperand = `${this.secondOperand}.`;\n                this.updateDisplay(`${this.firstOperand} ${this.operator} ${this.secondOperand}`);\n            }\n        }\n    }\n    inputOperator(op) {\n        if (!this.firstOperand)\n            return;\n        if (this.operator && !this.secondOperand) {\n            this.operator = op;\n            this.updateDisplay(`${this.firstOperand} ${this.operator}`);\n            return;\n        }\n        if (this.operator && this.secondOperand) {\n            this.calculateResult();\n            this.operator = op;\n            this.secondOperand = \"\";\n        }\n        else {\n            this.operator = op;\n        }\n        this.updateDisplay(`${this.firstOperand} ${this.operator}`);\n    }\n    handleSingleOperandOperator(operator) {\n        let value = parseFloat(this.firstOperand);\n        let result;\n        switch (operator) {\n            case \"√x\":\n            case \"&radic;x\":\n                if (value < 0) {\n                    this.updateDisplay(\"Ошибка\");\n                    return;\n                }\n                result = Math.sqrt(value);\n                break;\n            case \"3√x\":\n                result = Math.cbrt(value);\n                break;\n            case \"x2\":\n                result = Math.pow(value, 2);\n                break;\n            case \"x3\":\n                result = Math.pow(value, 3);\n                break;\n            case \"ln\":\n                if (value <= 0) {\n                    this.updateDisplay(\"Ошибка\");\n                    return;\n                }\n                result = Math.log(value);\n                break;\n            case \"log10\":\n                if (value <= 0) {\n                    this.updateDisplay(\"Ошибка\");\n                    return;\n                }\n                result = Math.log10(value);\n                break;\n            case \"sin\":\n                result = Math.sin((value * Math.PI) / 180);\n                break;\n            case \"cos\":\n                result = Math.cos((value * Math.PI) / 180);\n                break;\n            case \"tan\":\n                result = Math.tan((value * Math.PI) / 180);\n                break;\n            case \"π\":\n                result = Math.PI;\n                break;\n            case \"mc\":\n                this.memory = 0;\n                break;\n            case \"m+\":\n                this.memory += value;\n                break;\n            case \"m-\":\n                this.memory -= value;\n                break;\n            case \"mr\":\n                result = this.memory;\n                break;\n            case \"10x\":\n                result = Math.pow(10, value);\n                break;\n            case \"x!\": {\n                if (value < 0 || !Number.isInteger(value)) {\n                    this.updateDisplay(\"Ошибка\");\n                    return;\n                }\n                function factorial(n) {\n                    if (n === 0 || n === 1)\n                        return 1;\n                    return n * factorial(n - 1);\n                }\n                result = factorial(value);\n                break;\n            }\n            case \"1/x\":\n                if (value === 0 || isNaN(value)) {\n                    this.updateDisplay(`Ошибка`);\n                    return;\n                }\n                result = 1 / value;\n                break;\n            case 'Rad':\n                result = value * Math.PI / 180;\n                break;\n            case 'sinh':\n                result = Math.sinh(value);\n                break;\n            case 'cosh':\n                result = Math.cosh(value);\n                break;\n            case 'tanh':\n                result = Math.tanh(value);\n                break;\n            default:\n                this.updateDisplay(`неизвестная команда`);\n                return;\n        }\n        if (result !== undefined) {\n            // Форматируем числовые результаты для лучшего отображения\n            if (typeof result === \"number\" && !Number.isInteger(result)) {\n                result = parseFloat(result.toFixed(4));\n            }\n            this.firstOperand = typeof result === \"number\" ? result.toString() : \"\";\n            this.updateDisplay(this.firstOperand);\n        }\n    }\n}\n"],"names":["updateButton","buttonEl","isDark","newCta","setAttribute","sunIcon","querySelector","moonIcon","classList","add","remove","updateThemeOnHtmlEl","theme","document","button","currentThemeSetting","localStorageTheme","systemSettingDark","matches","calculateSettingAsThemeString","localStorage","getItem","window","matchMedia","addEventListener","event","newTheme","setItem","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","DigitCommand","constructor","digit","receiver","this","execute","inputDigit","DecimalCommand","inputDecimal","OperatorCommand","operator","inputOperator","SingleOperandCommand","handleSingleOperandOperator","ResultCommand","calculateResult","ClearCommand","clear","ToggleSignCommand","toggleSign","DeleteLastDigitCommand","deleteLastDigit","PercentageCommand","handlePercentage","display","buttons","querySelectorAll","firstOperand","secondOperand","shouldResetDisplay","memory","updateDisplay","value","textContent","toString","length","slice","substring","parseFloat","a","b","result","Math","pow","E","Number","isInteger","toFixed","includes","op","sqrt","cbrt","log","log10","sin","PI","cos","tan","factorial","n","isNaN","sinh","cosh","tanh","doubleOperandOperators","singleOperandOperators","handleButtonClick","_a","buttonValue","target","trim","forEach","key","convertOperator"],"sourceRoot":""}